// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(TemplateDBContext))]
    [Migration("20211212164229_tEST")]
    partial class tEST
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Door", b =>
                {
                    b.Property<int>("DoorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoorID"), 1L, 1);

                    b.Property<bool>("Access")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DörrBenämning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("TenantID")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoorID");

                    b.HasIndex("LocationID");

                    b.ToTable("Doors");

                    b.HasData(
                        new
                        {
                            DoorID = 1,
                            Access = false,
                            DörrBenämning = "Tvätt",
                            Explanation = "Dörr mot tvättstuga"
                        },
                        new
                        {
                            DoorID = 2,
                            Access = false,
                            DörrBenämning = "LGH",
                            Explanation = "Dörr till lägenhet"
                        });
                });

            modelBuilder.Entity("API.Models.DoorOpened", b =>
                {
                    b.Property<Guid?>("DoorOpenedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TenantID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("DoorOpenedId");

                    b.ToTable("DoorsOpened");
                });

            modelBuilder.Entity("API.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("API.Models.Tenant", b =>
                {
                    b.Property<int>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantID"), 1L, 1);

                    b.Property<int>("Apartment")
                        .HasColumnType("int");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Namne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantID");

                    b.HasIndex("LocationID");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            TenantID = 1,
                            Apartment = 1001,
                            Namne = "Göran Svensson",
                            Tag = "1001A"
                        },
                        new
                        {
                            TenantID = 2,
                            Apartment = 1002,
                            Namne = "Göran Andersson",
                            Tag = "1002A"
                        });
                });

            modelBuilder.Entity("API.Models.Door", b =>
                {
                    b.HasOne("API.Models.Location", null)
                        .WithMany("Doors")
                        .HasForeignKey("LocationID");
                });

            modelBuilder.Entity("API.Models.Tenant", b =>
                {
                    b.HasOne("API.Models.Location", null)
                        .WithMany("Tenants")
                        .HasForeignKey("LocationID");
                });

            modelBuilder.Entity("API.Models.Location", b =>
                {
                    b.Navigation("Doors");

                    b.Navigation("Tenants");
                });
#pragma warning restore 612, 618
        }
    }
}
